middleware() {
    const { app } = this;
    const swaggerDefinition = {
      info: {
        title: 'REST API for Node JS Application',
        version: '1.0.0',
        description: 'This is the REST API for Node JS Application',
      },
      host: `${config.app.swaggerHost}`,
      basePath: '/api',
      securityDefinitions: {
        BearerAuth: {
          type: 'apiKey',
          description: 'JWT authorization of an API',
          name: 'Authorization',
          in: 'header',
        },
      },
    };
 
    const options = {
      swaggerDefinition,
      apis: ['./api-docs/*.yaml'],
    };
 
    const swaggerSpec = swaggerJSDoc(options);
    app.use(cors());
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json({ limit: '2000mb' }));
    app.use(compression());
    app.use(methodOverride());
    if (config.app.environment === 'development') {
      app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));
    }
    app.use('/assets', express.static(`${__dirname}/uploads`));
    app.use('/images', express.static(`${__dirname}/images`));
    app.use('/public', express.static(`${__dirname}/../public`));
    app.use(
      helmet({
        contentSecurityPolicy: false,
        referrerPolicy: false,
        originAgentCluster: false,
      }),
    );
    app.use((req, res, next) => {
      if (config?.app?.baseUrl.split(':')[0] === 'https') {
        config.app.setBaseUrl(`https://${req.headers.host}/`);
      } else {
        config.app.setBaseUrl(`http://${req.headers.host}/`);
      }
      res.setHeader('X-XSS-Protection', '1; mode=block');
      next();
    });
 
    app.use('/api/*', appVersionMiddleware);
  }